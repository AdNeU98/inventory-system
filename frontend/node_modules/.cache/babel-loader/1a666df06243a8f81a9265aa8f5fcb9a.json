{"ast":null,"code":"var _jsxFileName = \"/Users/anirbandutta/Downloads/DP-Project/InventoryManagementSystem/frontend/src/context/Auth.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useLocalStorageState } from '../hooks/useLocalStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/React.createContext();\nAuthContext.displayName = 'AuthContext';\nexport const AuthProvider = props => {\n  _s();\n  const [userData, setUserData] = useLocalStorageState('userData', null);\n  let isLoggedIn = false;\n  if (userData && userData.id) {\n    // if (userData && (userData.id || userData.token) && (!userData.expires || new Date() < new Date(userData.expires))) {\n    isLoggedIn = true;\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      userData,\n      setUserData,\n      isLoggedIn\n    },\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 11\n  }, this);\n};\n_s(AuthProvider, \"tAOC3FwP7p6HCeSGh0nNZ88JuRg=\", false, function () {\n  return [useLocalStorageState];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","useLocalStorageState","jsxDEV","_jsxDEV","AuthContext","createContext","displayName","AuthProvider","props","_s","userData","setUserData","isLoggedIn","id","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/anirbandutta/Downloads/DP-Project/InventoryManagementSystem/frontend/src/context/Auth.js"],"sourcesContent":["import React from 'react';\nimport { useLocalStorageState } from '../hooks/useLocalStorage';\nexport const AuthContext = React.createContext();\n\nAuthContext.displayName = 'AuthContext';\n\nexport const AuthProvider = (props) => {\n  const [userData, setUserData] = useLocalStorageState('userData', null);\n\n  let isLoggedIn = false;\n  \n  if(userData && userData.id) {\n  // if (userData && (userData.id || userData.token) && (!userData.expires || new Date() < new Date(userData.expires))) {\n    isLoggedIn = true;\n  }\n  return (<AuthContext.Provider value={{ userData, setUserData, isLoggedIn }} {...props} />)\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,oBAAoB,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAChE,OAAO,MAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAa,CAAC,CAAC;AAEhDD,WAAW,CAACE,WAAW,GAAG,aAAa;AAEvC,OAAO,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,oBAAoB,CAAC,UAAU,EAAE,IAAI,CAAC;EAEtE,IAAIW,UAAU,GAAG,KAAK;EAEtB,IAAGF,QAAQ,IAAIA,QAAQ,CAACG,EAAE,EAAE;IAC5B;IACED,UAAU,GAAG,IAAI;EACnB;EACA,oBAAQT,OAAA,CAACC,WAAW,CAACU,QAAQ;IAACC,KAAK,EAAE;MAAEL,QAAQ;MAAEC,WAAW;MAAEC;IAAW,CAAE;IAAA,GAAKJ;EAAK;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;AAC3F,CAAC;AAAAV,EAAA,CAVYF,YAAY;EAAA,QACSN,oBAAoB;AAAA;AAAAmB,EAAA,GADzCb,YAAY;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}